# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DcxIcuy_XyK9L4SRoNgXzxeVf1D2hlgL
"""

# importing required modules
import idx2numpy
import tensorflow as tf
import numpy as np

#importing datasets

train = idx2numpy.convert_from_file("train-images.idx3-ubyte")
trainlabel = idx2numpy.convert_from_file("train-labels.idx1-ubyte")
test = idx2numpy.convert_from_file("t10k-images.idx3-ubyte")
testlabel = idx2numpy.convert_from_file("t10k-labels.idx1-ubyte")


# building Convolution Neural network
cnn_model = tf.keras.Sequential()
cnn_model.add(tf.keras.layers.Conv2D(128,(2,2),input_shape = train.shape[0:],activation='relu'))
cnn_model.add(tf.keras.layers.MaxPool2D((2,2)))
cnn_model.add(tf.keras.layers.Conv2D(128,(2,2),input_shape = train.shape[0:],activation='relu'))
cnn_model.add(tf.keras.layers.MaxPool2D((2,2)))
cnn_model.add(tf.keras.layers.Flatten())
cnn_model.add(tf.keras.layers.Dense(128,activation='relu'))
cnn_model.add(tf.keras.layers.Dense(64,activation='relu'))
cnn_model.add(tf.keras.layers.Dense(10,activation='softmax'))

cnn_model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

cnn_model.summary()

cnn_model.fit(train,trainlabel,epochs=5,validation_split=.2)

cnn_model.evaluate(test,testlabel)

#building muilti layer preceptron model


MLP_model = tf.keras.models.Sequential()
MLP_model.add(tf.keras.layers.Flatten(input_shape = (28,28)))
MLP_model.add(tf.keras.layers.Dense(124))
MLP_model.add(tf.keras.layers.Activation('sigmoid'))
MLP_model.add(tf.keras.layers.Dense(124))
MLP_model.add(tf.keras.layers.Activation('sigmoid'))
MLP_model.add(tf.keras.layers.Dense(124,activation ='sigmoid'))
MLP_model.add(tf.keras.layers.Dense(10))

MLP_model.compile(optimizer='adam',
                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])

MLP_model.summary()

MLP_model.fit(train,trainlabel,epochs=5,validation_split=0.2)

MLP_model.summary()